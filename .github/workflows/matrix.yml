#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: mia0x75
#=================================================
name: Matrix Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build'
        required: true
        default: 'v23.05.2'
  repository_dispatch:
    types: [Matrix Build]

permissions:
  contents: write
  packages: write
  actions: write
  
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  VERBOSE: true
  FEEDS_CONF: feeds.conf.default
  PRE_FEEDS_UPDATE: 00-feeds-update.sh
  POST_FEEDS_UPDATE: 99-feeds-update.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      fail-fast: false
      matrix:
        target: [Intel-x86-64, Phicomm-K2P, NanoPi-R5S, Redmi-AX6000]
        include:
          - target: Intel-x86-64
            config: intel-x86-64-full.config
            tag: Intel-x86_64
          - target: Phicomm-K2P
            config: phicomm-k2p-full.config
            tag: Phicomm-K2P
          - target: NanoPi-R5S
            config: nanopi-r5s-full.config
            tag: NanoPi-R5S
          - target: Redmi-AX6000
            config: redmi-ax6000-full.config
            tag: Redmi-AX6000
            
    name: "build openwrt"
    outputs:
      tag: ${{ steps.version.outputs.tag }}

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}

    - name: set tag from inputs or client payload
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          tag="${{ github.event.inputs.tag }}"
        else
          tag="${{ github.event.client_payload.tag }}"
        fi
        echo "tag=${tag}" >> $GITHUB_OUTPUT

    - name: clone source code
      run: |
        df -hT $PWD

        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        cd /workdir
          
        git clone $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        git fetch --all
        git checkout tags/${{ steps.version.outputs.tag }}

        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          echo "Upstream latest tag: ${{ steps.version.outputs.tag }}"
          echo "Current released tag: $(awk '/latest/{print $NF; exit}' README.md)"
        fi
        
    - name: initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt-get -qq update --fix-missing
        sudo apt full-upgrade -y

        # https://openwrt.org/docs/guide-developer/toolchain/install-buildsystem#examples_of_package_installations
        # for ubuntu-22.04
        sudo apt-get -y -qq install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget qemu-utils python3-pyelftools > /dev/null
  
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        
        sudo systemctl daemon-reload

    - name: load custom feeds
      run: |
        cd openwrt
        sh $GITHUB_WORKSPACE/$PRE_FEEDS_UPDATE

    - name: update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

        if [ "${{ matrix.target }}" == "Phicomm-K2P" ]; then
          patch package/feeds/luci/luci-light/Makefile $GITHUB_WORKSPACE/patches/luci-light.patch
          patch package/feeds/luci/luci/Makefile $GITHUB_WORKSPACE/patches/luci.patch
          patch -p2 < $GITHUB_WORKSPACE/patches/luci-mod-status.patch
          patch -p2 < $GITHUB_WORKSPACE/patches/luci-mod-system.patch
        fi

    - name: load custom configuration
      run: |
        [ -e files ] && cp -R files openwrt/files
        [ -e devices/${{ matrix.config }} ] && cp devices/${{ matrix.config }} openwrt/.config

    - name: download package
      id: package
      run: |
        cd openwrt
        make defconfig clean
        
        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
          grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
          sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
          sed -i 's/CONFIG_PACKAGE_/  * /g' Plug-in
          sed -i 's/=y/\ /g' Plug-in
          sed -i 's/=m/\ /g' Plug-in

          echo
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo "_/"
          echo "_/ 已选插件列表..."
          echo "_/"
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo
          cat Plug-in
          echo -e "\n\n\n\n"
          rm -rf Plug-in
        fi
        
    - name: make download
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        [ -e $GITHUB_WORKSPACE/etc/banner ] && cp $GITHUB_WORKSPACE/etc/banner package/base-files/files/etc

    - name: check config file again
      run: |
        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          echo
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo "_/"
          echo "_/ 编译程序修正后的变化 ..."
          echo "_/"
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo
          diff $GITHUB_WORKSPACE/devices/${{ matrix.config }} openwrt/.config || true
        fi
        
        cd openwrt
        sh $GITHUB_WORKSPACE/$POST_FEEDS_UPDATE
          
    - name: compile firmware
      id: compile-firmware
      run: |
        set -e
        cd openwrt

        # make -j$(nproc) toolchain/install
        # make -j1 V=sc
        make -j$(nproc)
        
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: organize files
      id: organize
      if: steps.compile-firmware.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        
        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          tree .
        fi
        
        rm -rf packages
        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          tree .
        fi
        
        # ├── config.buildinfo
        # ├── feeds.buildinfo
        # ├── openwrt-23.05-immortalwrt-xxxxxx
        # ├── profiles.json
        # ├── sha256sums
        # └── version.buildinfo

        for file in openwrt-23.05-immortalwrt-*; do
          mv "$file" "${file#openwrt-23.05-immortalwrt-}"
        done
        
        if [ '${{ env.VERBOSE }}' == 'true' ] ; then
          echo
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo "_/"
          echo "_/ 待发布文件列表..."
          echo "_/"
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          tree .
          echo
        fi
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: debug -> list files before upload to artifact
      if: env.VERBOSE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: ls -lah ${{ env.FIRMWARE }}

    - name: upload binaries to artifact
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.tag }}-immortalwrt
        path: ${{ env.FIRMWARE }}/
        
    - name: debug -> list files after upload to artifact
      if: env.VERBOSE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: ls -lah ${{ env.FIRMWARE }}
    
    - name: upload binaries to release
      id: release
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      env:
        TAG: ${{ steps.version.outputs.tag }}
        DESC: ${{ steps.version.outputs.tag }}
      with:
        file: ${{ env.FIRMWARE }}/*
        file_glob: true
        tag: ${{ matrix.tag }}-${{ env.TAG }}
        overwrite: true
        body: ${{ env.DESC }}
    
    - name: remove old releases
      if: steps.release.outputs.browser_download_url != '' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        keep_latest: 3
        delete_tag_pattern: ${{ matrix.tag }}
        delete_tags: true

  update-repo:
    needs:
      - build
    runs-on: ubuntu-latest
    name: "update source code"
    env:
      TAG: ${{ needs.build.outputs.tag }}

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: update source code
        id: update-code
        run: |
          sed -i "s/\(latest.*:\).*/\1 ${{ env.TAG }}/" README.md
          sed -i "s/\(default[[:space:]]*:\).*/\1 '${{ env.TAG }}'/" .github/workflows/matrix.yml
          
          git checkout --orphan tmp_work
          git branch -D main
          DATE="$(date '+%Y/%m/%d')"
          COMMENT="Build to ${{ env.TAG }} by Github Actions, ${DATE}"

          git branch -m main
          echo "msg=$COMMENT" >> $GITHUB_OUTPUT
          
      - name: commit and push changes
        env:
          MSG: ${{ steps.update-code.outputs.msg }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: ${{ env.MSG }}
          force: true
          
      - name: delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          delete_workflow_pattern: "Matrix Build"
          retain_days: 0
          keep_minimum_runs: 10
          delete_run_by_conclusion_pattern: "cancelled, skipped, success"
